package org.home.ds.tree;

import java.util.HashMap;

public class CloneTreeWithRandomPointer {

    /**
     * Driver method for cloning tree,
     * @param source
     * @return
     */
    public RandomTreeNode cloneTree(RandomTreeNode source){
        HashMap<RandomTreeNode, RandomTreeNode> sourceDestinationMap = new HashMap<>();
        RandomTreeNode dest = cloneRecursively(source,null,sourceDestinationMap);
        setRandomPointer(source,dest,sourceDestinationMap);
        return dest;

    }

    /**
     * Print the tree
     * @param source
     */
    public void printTree(RandomTreeNode source){
        if(source == null){
            return;
        }
        printTree(source.getLeft());
        System.out.println(source);
        printTree(source.getRight());
    }

    /**
     * The method set the random pointer using the mapping
     * generated by {@link CloneTreeWithRandomPointer#cloneRecursively(
     * RandomTreeNode, RandomTreeNode, HashMap)}
     * The method find the target node of random pointer in cloned tree by the following logic
     * <ol>
     *     <li>Find the target node (s1) of random pointer in source tree </li>
     *     <li>Find the value of cloned node(T1) from <code>mapping</code> using s1</li>
     *     <li>Set random pointer by T1 </li>
     * </ol>
     * @param source
     * @param dest
     * @param mapping
     */
    private void setRandomPointer(RandomTreeNode source,
                                  RandomTreeNode dest,
                                  HashMap<RandomTreeNode,
                                          RandomTreeNode> mapping){
        if(source == null){
            return;
        }
        setRandomPointer(source.getLeft(),dest.getLeft(),mapping);
        dest.setRandom(mapping.get(source.getRandom()));
        setRandomPointer(source.getRight(),dest.getRight(),mapping);
    }

    /**
     * Cloned the source tree recursively. It only creates left and right child.
     * Keep the mapping of each source tree node vs dest tree node.
     * The mapping will be used to assign the random pointer.
     * The method will create the root of destination method and return the root.
     * @param source The source tree
     * @param dest The Destination Tree
     * @param mapping mapping between source Tree and destination tree
     * @return root of destination tree
     */
    private RandomTreeNode cloneRecursively(RandomTreeNode source,
                                            RandomTreeNode dest,
                                            HashMap<RandomTreeNode, RandomTreeNode> mapping){
        if(source==null){
            return source;
        }
        if(dest == null){
            dest = new RandomTreeNode(source.getKey());
            mapping.put(source,dest);
        }
        dest.setLeft(cloneRecursively(source.getLeft(),dest.getLeft(),mapping));
        dest.setRight(cloneRecursively(source.getRight(),dest.getRight(),mapping));
        return dest;
    }

    /**
     * Create the tree with random ponter.
     * @return {@link RandomTreeNode}
     */
    public RandomTreeNode createTernaryTree(){
        RandomTreeNode root = new RandomTreeNode(1);
        root.setLeft(new RandomTreeNode(2));
        root.setRight(new RandomTreeNode(3));
        root.getLeft().setLeft(new RandomTreeNode(4));
        root.getLeft().setRight(new RandomTreeNode(5));
        root.getLeft().setRandom(root);
        root.getRight().setLeft(new RandomTreeNode(6));
        root.getRight().setRight(new RandomTreeNode(7));
        root.getRight().setRandom(root.getRight());
        return root;
    }
}

/**
 * Class to represent tree node with random pointer
 */
class RandomTreeNode {
    RandomTreeNode left;
    RandomTreeNode right;
    RandomTreeNode random;
    Integer key;

    public RandomTreeNode(Integer key) {
        this.key = key;
        left = null;
        right = null;
        random = null;

    }

    public RandomTreeNode getLeft() {
        return left;
    }

    public void setLeft(RandomTreeNode left) {
        this.left = left;
    }

    public RandomTreeNode getRight() {
        return right;
    }

    public void setRight(RandomTreeNode right) {
        this.right = right;
    }

    public RandomTreeNode getRandom() {
        return random;
    }

    public void setRandom(RandomTreeNode random) {
        this.random = random;
    }

    public Integer getKey() {
        return key;
    }

    public void setKey(Integer key) {
        this.key = key;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("RandomTreeNode{");
        sb.append("key = ").append(key);
        if(left == null){
            sb.append("left = ").append(left);
        }else{
            sb.append("left = ").append(left.key);
        }
        //sb.append("left=").append(left.key);
        if(right == null){
            sb.append(", right = ").append(right);
        }else{
            sb.append(", right = ").append(right.key);
        }

        if(random!=null){
            sb.append(", random = ").append(random.key);
        }else{
            sb.append(", random = ").append(random);
        }


        sb.append('}');
        return sb.toString();
    }
}